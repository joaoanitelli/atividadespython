# -*- coding: utf-8 -*-
"""João Pedro Artero - 232_LP_Arquivo_m.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pq7PapzRWbygjeaXXbP5-dDBETg0ru0f
"""

arquivo = open('numeros.txt','w')
for linha in range(1,21):
    arquivo.write(f'Linha nº {linha}\n')
arquivo.close()

arquivo = open('numeros.txt','r')
for linha in arquivo.readlines():
    print(linha)
arquivo.close()

arquivo = open('numeros.txt','w')
for linha in range(1,20+1):
    arquivo.write(f'Linha nº {linha}.\n')
arquivo.close()

arquivo = open('numeros.txt','a')
for linha in range(21,30+1):
    arquivo.write(f'Linha nº {linha}\n')
arquivo.close()

arquivo = open('numeros.txt','r')
for x in arquivo.readlines():
    print(x)
arquivo.close()

impares = open('impares.txt','w')
pares = open('pares.txt','w')
for i in range(1,10):
    if i % 2 == 0:
        pares.write(f'{i}\n')
    else:
        impares.write(f'{i}\n')
impares.close()
pares.close()

impares = open('impares.txt','r')
for i in impares.readlines():
    print(i)
impares.close()

from google.colab import drive
drive.mount('/content/drive')

#trabalhando com dois arquivos
#gravação de números pares e ímpares em arquivos diferentes

impares = open('impares.txt','a')
pares = open('pares.txt','a')
for linha in range (1,20+1):
    if linha % 2 == 0:
        pares.write(f'{linha}\n')
    else:
        impares.write(f'{linha}\n')
impares.close()
pares.close()

pares = open('pares.txt','r')
for linha in pares.readlines():
    print(linha)
pares.close()

class TipoProduto():
    matricula = 0
    nome = ''
    salario = 0.0

def cadastrar():
    arquivo = open('arq_Funcionario.txt','w')
    print('Cadastro de Funcionários..............')
    for i in range(3):
        f = TipoProduto()
        f.matricula = int(input("Insira o código do funcionário: "))
        f.nome = input("Insira o nome do funcionário: ")
        f.salario = float(input("Insira o salário do funcionário: "))
        arquivo.write(f'{f.matricula};{f.nome};{f.salario:.2f}\n')
    arquivo.close

def mostrar():
    arquivo = open('arq_Funcionario.txt','r')
    print('Apresentação dos dados dos funcionários .........')
    print('Matrícula\tNome\tSalário')
    for linha in arquivo.readlines():
        mat,nome,sal = linha.strip().split(';')
        print(mat,'\t\t',nome,'\t',sal)
    arquivo.close()

def main():
    op = 1
    while op >= 1 and op <= 2:
        print('Escolha uma opção:')
        print('1 - Cadastro de funcionários')
        print('2 - Visualizar funcionários cadastrados')
        print('3 - Sair')
        op = int(input('Digite a opção: '))
        if op == 1:
            cadastrar()
        elif op == 2:
            mostrar()
main()

class TipoFuncionario:
    matricula = 0
    nome = ''
    salario = 0.0

def Cadastrar():
    arquivo = open('arq_Funcionario.txt', 'w')
    print('Cadastro de Funcionários.........................')
    for i in range(3):
        f = TipoFuncionario()
        f.matricula = int(input('Digite a matrícula: '))
        f.nome = input('Digite o nome: ')
        f.salario = float(input('Digite o salário: '))
        arquivo.write(f'{f.matricula};{f.nome};{f.salario:.2f}\n')
        #ou
        #arquivo.write('%d %s %.2f\n' % (f.matricula, f.nome, f.salario))
    arquivo.close()

def Mostrar():
    arquivo = open('arq_Funcionario.txt', 'r')
    print('Apresentação dos dados dos funcionários .........')
    print('Matrícula\tNome\tSalário')
    for linha in arquivo.readlines():
        # o caracter que está na função write() do arquivo DEVE
        # SER O MESMO no argumento da função split
        mat, nome, sal = linha.strip().split(";")
        print(mat,'\t\t',nome,'\t',sal)
    arquivo.close()

def main():
    op = 1
    while op >=1 and op <= 2:
        print('*** Gerenciamento de Funcionários COM ARQUIVO ***')
        print('1- Cadastrar')
        print('2- Mostrar')
        print('3- Sair')
        op = int(input('Digite a opção: '))
        if op == 1:
            Cadastrar()
        elif op == 2:
            Mostrar()
main()

"""### 1. Elabore uma estrutura para representar e armazenar 10 fornecedores (código, nome, endereco). Utilize os recursos de arquivo para armazenar estes dados permanentemente. O nome do arquivo deve ser o mesmo da estrutura. Construa um menu com as seguintes opções, cada uma delas deve ter uma função e a main para chamar todas elas.

Menu de opções:
1. Cadastrar fornecedores
2. Visualizar todos os dados
3. Sair

"""

class TipoFornecedor:
    codigo = 0
    nome = ''
    endereco = ''

def cadastrar():
    arquivo = open('fornecedores.txt','a')
    for i in range(10):
        f = TipoFornecedor()
        f.codigo = int(input("Insira o código do fornecedor: "))
        f.nome = input("Insira o nome do fornecedor: ")
        f.endereco = input("Insira o endereço: ")
        arquivo.write(f'{f.codigo}, {f.nome}, {f.endereco}\n')
    arquivo.close()

def visualizar():
    arquivo = open('fornecedores.txt','r')
    for linha in arquivo.readlines():
        print(linha)
    arquivo.close()

def menu():
    print('1. Cadastrar fornecedores')
    print('2. Visualizar todos os dados')
    print('3. Sair')
    op = int(input("Insira uma opção: "))
    return op

def main():
    opcao = menu()
    while opcao >= 1 and opcao <= 3:
        if opcao == 1:
            cadastrar()
        elif opcao == 2:
            visualizar()
        elif opcao == 3:
            print('Você saiu do sistema.')
            break
        else:
            print('Insira uma opção válida.')
            main()
        opcao = menu()
main()

"""### 2. Elabore uma estrutura para representar e armazenar 10 produtos (código, nome, preço). Utilize os recursos de arquivo para armazenar estes dados permanentemente. O nome do arquivo deve ser o mesmo da estrutura. Construa um menu com as seguintes opções, cada uma delas deve ter uma função e a main para chamar todas elas.

Menu de opções:
1. Cadastrar produtos
2. Visualizar todos os dados
3. Sair
"""

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

def cadastrar():
    arquivo = open('produtos.txt','a')
    print('Cadastro de produtos........')
    for i in range(10):
        p = TipoProduto()
        p.codigo = int(input("Insira o código do produto: "))
        p.nome = input("Insira o nome do produto: ")
        p.preco = float(input("Insira o preço do produto: R$ "))
        arquivo.write(f'Código: {p.codigo} - Nome do produto: {p.nome} - Preço: R$ {p.preco}\n')
    arquivo.close()

def visualizar():
    arquivo = open('produtos.txt','r')
    print('Visualizar Produtos........')
    for linha in arquivo.readlines():
        print(linha)
    arquivo.close

def menu():
    print('1. Cadastrar produtos')
    print('2. Visualizar todos os dados')
    print('3. Sair')
    op = int(input("Insira uma opção: "))
    return op

def main():
    opcao = menu()
    while opcao >= 1 and opcao <= 3:
        if opcao == 1:
            cadastrar()
        elif opcao == 2:
            visualizar()
        elif opcao == 3:
            print('Você saiu do sistema.')
            break
        else:
            print('Insira uma opção válida.')
            main()
        opcao = menu()
main()

"""### 3. Elabore uma estrutura para representar e armazenar 10 alunos (matricula, nome, telefone). Utilize os recursos de arquivo para armazenar estes dados permanentemente. O nome do arquivo deve ser o mesmo da estrutura. Construa um menu com as seguintes opções, cada uma delas deve ter uma função e a main para chamar todas elas.

Menu de opções:
1. Cadastrar alunos
2. Visualizar todos os dados
3. Sair

"""

class TipoAluno:
    matricula = 0
    nome = ''
    telefone = 0

def cadastrar():
    arquivo = open('alunos.txt','a')
    print('Cadastro de alunos........')
    for i in range(10):
        a = TipoAluno()
        a.matricula = int(input("Insira o número de matrícula: "))
        a.nome = input("Insira o nome do aluno: ")
        a.telefone = int(input("Insira o telefone do responsável: "))
        arquivo.write(f'Nº de matrícula: {a.matricula} - Nome: {a.nome} - Telefone: {a.telefone}\n')
    arquivo.close()

def visualizar():
    arquivo = open('alunos.txt','r')
    print('Visualizar alunos cadastrados........')
    for linha in arquivo.readlines():
        print(linha)
    arquivo.close()

def menu():
    print('1. Cadastrar Alunos')
    print('2. Visualizar todos os dados')
    print('3. Sair')
    op = int(input("Insira uma opção: "))
    return op

def main():
    opcao = menu()
    while opcao >= 1 and opcao <= 3:
        if opcao == 1:
            cadastrar()
        elif opcao == 2:
            visualizar()
        elif opcao == 3:
            print('Você saiu do sistema.')
            break
        else:
            print('Insira uma opção válida.')
            main()
        opcao = menu()
main()

"""### 4. Baixe o arquivo futebol.txt que esta na pasta Material do aula do Teams. Leia este arquivo e o apresente. Com os dados lidos, armazene na estrutura Futebol (posicao_jogo, altura, peso, imc), calcule o IMC (Índice de Massa Corporal), armazene na estrutura e também em outro arquivo, mas agora chamado futebol_imc.txt. Apresente este novo arquivo.
Observação: esse exercício deve ser carregado o arquivo futebol.txt, aqui no Colab, no menu (ícone pasta) do lado esquerdo, que estará disponível no Classroom.
"""

# Função para calcular o IMC
def calcular_imc(peso, altura):
    return peso / (altura ** 2)

# Processamento de dados
arquivo = open('futebol.txt', 'r')
vetor_futebol = []
for linha in arquivo:
    dados = linha.strip().split(',')
    posicao_jogo = dados[0]
    altura = float(dados[1])
    peso = float(dados[2])
    imc = calcular_imc(peso, altura)
    jogador = (posicao_jogo, altura, peso, imc)  # Armazenar dados como uma tupla
    vetor_futebol.append(jogador)
arquivo.close()

# Salvar dados no arquivo futebol_imc.txt
arquivo_imc = open('futebol_imc.txt', 'w')
for jogador in vetor_futebol:
    posicao_jogo, altura, peso, imc = jogador
    arquivo_imc.write(f'{posicao_jogo},{altura},{peso},{imc}\n')
arquivo_imc.close()

# Apresentar conteúdo do arquivo futebol_imc.txt
arquivo_imc = open('futebol_imc.txt', 'r')
conteudo = arquivo_imc.read()
print(conteudo)
arquivo_imc.close()

# imc = peso / (altura ** 2)
def calcular_imc(peso,altura):
     return peso / (altura**2)

# processamento de dados
arquivo = open('futebol.txt','r')
vetor_futebol = []
for linha in arquivo:
    dados = linha.strip().split(',')
    posicao_jogo = dados[0]
    altura = float(dados[1])
    peso = float(dados[2])
    imc = calcular_imc(peso, altura)
    jogador = (posicao_jogo, altura, peso, imc)
    vetor_futebol.append(jogador)
arquivo.close()

# salvar arquivos em futebol_imc.txt
arquivo_imc = open('futebol_imc.txt','w')
for jogador in vetor_futebol:
    posicao_jogo, altura, peso, imc = jogador
    arquivo_imc.write(f'{posicao_jogo},{altura},{peso},{imc}\n')
arquivo_imc.close()

# apresentar conteudo do arquivo futebol_imc.txt
arquivo_imc = open('futebol_imc.txt','r')
conteudo = arquivo_imc.read()
print(conteudo)
arqui