# -*- coding: utf-8 -*-
"""João Pedro Artero - 232_LP_Estrutura_m.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tATqifjTwQjKUHYSIsAE8f93rKReUl5j

#Fazer do exercício do 1 ao 8. O outro fica para estudo.
"""

class TipoAluno:
    matricula = 0
    nome = ''
    p1 = 0.0
    p2 = 0.0
    media = 0.0

def main():
    aluno = TipoAluno()
    aluno.matricula = int(input('Insira o código de matrícula do aluno: '))
    aluno.nome = input('Insira o nome do aluno: ')
    aluno.p1 = float(input("Insira a nota da p1: "))
    aluno.p2 = float(input("Insira a nota da p2: "))
    aluno.media = (aluno.p1 + aluno.p2) / 2
main()

class TipoAluno:
    matricula = 0 #int
    nome = '' #str
    p1 = 0.0 #float
    p2 = 0.0 #float
    media = 0.0 #float

def main(): #principal
    vet_aluno = []
    for i in range(2):
        a = TipoAluno()
        a.matricula = int(input("Insira o código de matrícula do aluno: "))
        a.nome = input("Insira o nome do aluno: ")
        a.p1 = float(input("Insira a nota da p1: "))
        a.p2 = float(input("Insira a nota da p2: "))
        a.media = (a.p1 + a.p2) / 2
        vet_aluno.append(a)
    for i in range(len(vet_aluno)):
        print("Matrícula:",vet_aluno[i].matricula,' Nome:',vet_aluno[i].nome,' P1:',vet_aluno[i].p1,' P2:',vet_aluno[i].p2,' Média:',vet_aluno[i].media)
main()

#Estruturas aninhadas

class TipoEndereco:
    logradouro = ''
    numero = 0
    bairro = ''
    cep = 0

class TipoAluno:
    matricula = 0
    nome = ''
    endereco = TipoEndereco()
    p1 = 0.0
    p2 = 0.0
    media = 0.0

def main():
    a = TipoAluno()
    a.matricula = int(input("Insira o código de matrícula: "))
    a.nome = input("Insira o nome do aluno: ")
    a.endereco.logradouro = input("Insira o nome da rua: ")
    a.endereco.numero = int(input("Insira o numero da casa: "))
    a.endereco.bairro = input("Insira o nome do bairro: ")
    a.endereco.cep = int(input("Insira o código do CEP: "))
    a.p1 = int(input("Insira a nota da P1: "))
    a.p2 = int(input("Insira a nota da P2: "))
    a.media = (a.p1 + a.p2) / 2
    print('Matrícula:',a.matricula,' Nome:',a.nome,' Logradouro:',a.endereco.logradouro,' Nº',a.endereco.numero,' Bairro:',a.endereco.bairro,' CEP:',a.endereco.cep,' Média: ',a.media)
main()

"""### 1. Elabore uma estrutura para representar um produto (código, nome, preço). Aplique 10% de aumento no preço do produto e apresente. Não use função."""

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0


p = TipoProduto()
p.codigo = int(input("Insira o código do produto: "))
p.nome = input("Insira o nome do produto: ")
p.preco = float(input("Insira o preço do produto: "))
print('Código:',p.codigo,' Nome:',p.nome,' Preço:',p.preco)
reajuste = (p.preco / 100) * 10
p.preco = p.preco + reajuste
print('O preço com 10% de aumento é: ',p.preco)

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

vetor_produto = []
p = TipoProduto()
p.codigo = int(input("Insira o código do produto: "))
p.nome = input("Insira o nome do produto: ")
p.preco = float(input("Insira o preco do produto: R$ "))
vetor_produto.append(p)
if len(vetor_produto) > 0:
    for i in range(len(vetor_produto)):
        vetor_produto[i].preco += vetor_produto[i].preco * 10/100
    print('---------------'*5)
    print('Reajuste realizado com sucesso!')
    print('O novo preço do produto é: R$ ',vetor_produto[i].preco)

"""### 2. Elabore uma estrutura para representar um produto (código, nome, preço). Cadastre 5 produtos, use vetor/lista. Aplique 10% de aumento no preço do produto e apresente todos os dados do preço. Não use função."""

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

vetor_produto = []
for i in range(5):
    p = TipoProduto()
    p.codigo = int(input("Insira o código do produto: "))
    p.nome = input("Insira o nome do produto: ")
    p.preco = float(input("Insira o preço do produto: "))
    vetor_produto.append(p)
    if len(vetor_produto) > 0:
        reajuste = (vetor_produto[i].preco / 100) * 10
        vetor_produto[i].preco = vetor_produto[i].preco + reajuste

for i in range(len(vetor_produto)):
    print('Código:',vetor_produto[i].codigo,' Nome do produto:',vetor_produto[i].nome,' Preço reajustado:',vetor_produto[i].preco)

# Digite seu código aqui
# slide 4

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

vetor_produto = []
for i in range(3):
    p = TipoProduto()
    p.codigo = int(input("Insira o código do produto: "))
    p.nome = input("Insira o nome do produto: ")
    p.preco = float(input("Insira o preco do produto R$ "))
    vetor_produto.append(p)
    if len(vetor_produto) > 0:
        vetor_produto[i].preco += vetor_produto[i].preco * 10/100
        print('Reajuste de 10% realizado com sucesso!')
if len(vetor_produto) > 0:
        print('---------------'*5)
        print('Código\t\t Nome\t\tPreço Reajustado')
        for i in range(len(vetor_produto)):
            print(vetor_produto[i].codigo,'\t\t',vetor_produto[i].nome,'\t\tR$',vetor_produto[i].preco)

"""### 3. Elabore uma estrutura para representar um produto (código, nome, preço). **Crie uma função** para cadastrar 5 produtos. **Crie outra função** para aplicar 10% de aumento no preço do produto e apresente, por meio **de outra função**, todos os dados do produtos cadastrados, após o aumento. Construa uma função para cada opção do menu a seguir:
Menu do Sistema
1. Cadastrar
2. Reajustar
3. Visualizar
4. Sair

Qual opção deseja?
"""

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

def cadastro(vetor_produto):
    for i in range(2):
        p = TipoProduto()
        p.codigo = int(input("Insira o código do produto: "))
        p.nome = input("Insira o nome do produto: ")
        p.preco = float(input("Insira o preço do produto: R$"))
        vetor_produto.append(p)
    return vetor_produto

def reajuste(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            reajuste = (vetor_produto[i].preco / 100) * 10
            vetor_produto[i].preco = vetor_produto[i].preco + reajuste
        print('Reajuste realizado com sucesso!')
    else:
        print('Não há produtos cadastrados.')
    return vetor_produto

def visualizar(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            print('Código:',vetor_produto[i].codigo,' Nome:',vetor_produto[i].nome,' Preço: R$',vetor_produto[i].preco)
    else:
        print('Não há produtos cadastrados.')
    return vetor_produto

def menu():
    print('Gerenciamento de produto\n1.Cadastrar \n2.Reajustar \n3.Visualizar \n4.Sair')
    op = int(input('Insira a opção desejada: '))
    return op

def main():
    vetor_produto = []
    opcao = menu()
    while opcao >= 1 and opcao <= 4:
        if opcao == 1:
            vetor_produto = cadastro(vetor_produto)
        elif opcao == 2:
            vetor_produto = reajuste(vetor_produto)
        elif opcao == 3:
            visualizar(vetor_produto)
        else:
            print('Voce saiu do sistema.')
            break #interrompe o loop
        opcao = menu() # resolveu o problema do print aparecendo infinitamente

main()

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

def cadastro(vetor_produto):
    for i in range(2):
        p = TipoProduto()
        p.codigo = int(input("Insira o código do produto: "))
        p.nome = input("Insira o nome do produto: ")
        p.preco = float(input("Insira o preço do produto: R$"))
        vetor_produto.append(p)
    return vetor_produto

def reajuste(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            reajuste = (vetor_produto[i].preco / 100) * 10
            vetor_produto[i].preco = vetor_produto[i].preco + reajuste
        print('Reajuste realizado com sucesso!')
    else:
        print('Não há produtos cadastrados.')
    return vetor_produto

def visualizar(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            print('Código:',vetor_produto[i].codigo,' Nome:',vetor_produto[i].nome,' Preço: R$',vetor_produto[i].preco)
    else:
        print('Não há produtos cadastrados.')
    return vetor_produto

def consultar(vetor_produto):
    if len(vetor_produto) > 0:
        achei = False
        busca = input("Qual produto você deseja encontrar? ")
        for i in range(len(vetor_produto)):
            if busca == vetor_produto[i].nome:
                achei = True
                print('Código:',vetor_produto[i].codigo,' Nome:',vetor_produto[i].nome,' Preço: R$',vetor_produto[i].preco)
                print('Produto Encontrado')
                break #Colocar o break, se não ele vai rodar o else por nao reconhecer os outros produtos
            else:
                print('Este produto ainda não foi cadastrado.')
        return vetor_produto

def alterar(vetor_produto):
    if len(vetor_produto) > 0:
        busca = int(input("Qual o código do produto que deseja encontrar: "))
        achei = False
        for i in range(len(vetor_produto)):
            if busca == vetor_produto[i].codigo:
                achei = True
                print('Código:',vetor_produto[i].codigo,' Nome:',vetor_produto[i].nome,' Preço: R$',vetor_produto[i].preco)
                vetor_produto[i].nome = input('Insira o novo nome: ')
                vetor_produto[i].preco = float(input('Insira o novo preço: '))
                print('Produto alterado com sucesso')
                break
            else:
                print('Produto não encontrado.')
                break
    return vetor_produto

def excluir(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            if i == 0:
                menor_preco = vetor_produto[i].preco
                indice_menor = i
            if vetor_produto[i].preco < menor_preco:
                menor_preco = vetor_produto[i].preco
                indice_menor = i
        vetor_produto.pop(indice_menor)
        print('Produto excluído com sucesso.')
    else:
        print('Não há produtos cadastrados.')
    return vetor_produto

def menu():
    print('Gerenciamento de produto\n1.Cadastrar \n2.Reajustar \n3.Visualizar \n4.Consulta por nome\n5.Alterar Produto\n6.Excluir por menor preço')
    op = int(input('Insira a opção desejada: '))
    return op

def main():
    vetor_produto = []
    opcao = menu()
    while opcao >= 1 and opcao <= 7:
        if opcao == 1:
            vetor_produto = cadastro(vetor_produto)
        elif opcao == 2:
            vetor_produto = reajuste(vetor_produto)
        elif opcao == 3:
            visualizar(vetor_produto)
        elif opcao == 4:
            consultar(vetor_produto)
        elif opcao == 5:
            vetor_produto = alterar(vetor_produto)
        elif opcao == 6:
            vetor_produto = excluir(vetor_produto)
        else:
            print('Voce saiu do sistema.')
            break #interrompe o loop
        opcao = menu() # resolveu o problema do print aparecendo infinitamente

main()

class TipoProduto:
    codigo = 0
    nome = ''
    preco = 0.0

def cadastrar(vetor_produto):
    for i in range(2):
        p = TipoProduto()
        p.codigo = int(input('Cadastre o código: '))
        p.nome = input('Cadastre o nome: ')
        p.preco = float(input('Cadastre o preço: '))
        vetor_produto.append(p)
    return vetor_produto

def reajustar(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            vetor_produto[i].preco += vetor_produto[i].preco * 10/100
        print('Reajuste realizado com sucesso!')
    else:
        print('Não há produtos cadastrados!')
    return vetor_produto

def visualizar(vetor_produto):
    if len(vetor_produto) > 0:
        print('Código\t\t Nome\t\tPreço R$')
        for i in range(len(vetor_produto)):
            print(vetor_produto[i].codigo,'\t\t',vetor_produto[i].nome,'\t\t',vetor_produto[i].preco)
    else:
        print('Não há produtos cadastrados!')

def consultar(vetor_produto):
    if len(vetor_produto) > 0:
        achei = False
        produto_pesquisar = input('Qual o nome do produto que quer encontrar? ')
        for i in range(len(vetor_produto)):
            if produto_pesquisar == vetor_produto[i].nome:
                achei = True
                print(vetor_produto[i].codigo,'\t\t',vetor_produto[i].nome,'\t\t',vetor_produto[i].preco)# completar com os outros atributos
                print('Produto encontrado!')
                break
        if achei == False: # if not achei
            print('Produto não encontrado!')
        #caso você tivesse que avaliar uma variável ou função de retorno bool
        #você implementaria o if assim, como boa prática de desenvolvimento
        # if achei:
    else:
        print('Não há produtos cadastrados!')

def alterar(vetor_produto):
    if len(vetor_produto) > 0:
        codigo_pesquisar = int(input('Qual código deseja encontrar? '))
        for i in range(len(vetor_produto)):
            if codigo_pesquisar == vetor_produto[i].codigo:
                vetor_produto[i].nome = input('Digite o novo nome: ')
                vetor_produto[i].preco = float(input('Digite o novo preço: '))
        print('Produto alterado com sucesso!')
    else:
        print('Não há produtos cadastrados!')
    return vetor_produto

def menu():
    print('\n\nSistema de Gerenciamento de Produtos')
    print('1 - Cadastrar')
    print('2 - Reajustar')
    print('3 - Visualizar')
    print('4 - Consulta por nome')
    print('5 - Alterar nome e preço por código')
    print('6 - Excluir por menor preço')
    print('7 - Sair')
    op = int(input('Qual opção deseja? '))
    return op

def excluir(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            if i == 0: # este if é executado apenas uma vez
                menor_preco = vetor_produto[i].preco
                indice_menor = i
            if vetor_produto[i].preco < menor_preco:
                menor_preco = vetor_produto[i].preco
                indice_menor = i
        vetor_produto.pop(indice_menor)
        print('Produto excluído com sucesso!')
    else:
        print('Não há produtos cadastrados!')
    return vetor_produto


def main():
    vetor_produto = []
    opcao = menu()
    while opcao >= 1 and opcao <= 7:
        if opcao == 1:
            vetor_produto = cadastrar(vetor_produto)
        elif opcao == 2:
            vetor_produto = reajustar(vetor_produto)
        elif opcao == 3:
            visualizar(vetor_produto)
        elif opcao == 4:
            consultar(vetor_produto)
        elif opcao == 5:
            vetor_produto = alterar(vetor_produto)
        elif opcao == 6:
            vetor_produto = excluir(vetor_produto)
        elif opcao == 7:
            print('\n\nFim da execução do sistema!')
            break # interrompe um estrutura de repetição
        opcao = menu()
    print('Término da execução do sistema')
main()

"""### 4. Uma escola precisa montar o cadastro geral de seus alunos. Este cadastro deverá conter as seguintes informações por aluno: nome completo, data de nascimento, telefone, endereço e série atual. Levando em conta que esta escola possui no máximo 500 alunos, como você faria para estruturar estas informações num sistema de gerenciamento para a escola? Implemente utilizando estrutura. Também **use a criação de funções para cada operação**. Use o menu a seguir:
Menu de opções:
1. Cadastrar alunos
2. Consulta por nome
3. Visualizar todos os dados
4. Sair

"""

class TipoAluno:
    nome = ''
    nascimento = 0
    idade = 0
    telefone = 0
    logradouro = ''
    numero = 0
    bairro = ''
    cep = 0
    endereco = TipoEndereco()
    serie = 0

def cadastrar(vetor_aluno):
    for i in range(500):
        a = TipoAluno()
        a.nome = input("Insira o nome do aluno: ")
        a.nascimento = int(input("Insira a data de nascimento: "))
        a.idade = 2023 - a.nascimento
        a.telefone = int(input("Insira o telefone do responsável: "))
        a.logradouro = input("Insira o logradouro: ")
        a.numero = int(input("Insira o Nº da casa: "))
        a.bairro = input("Insira o nome do bairro: ")
        a.cep = int(input("Insira o código do CEP: "))
        a.serie = int(input("Insira a série do aluno: "))
        vetor_aluno.append(a)
    return vetor_aluno

def consultar(vetor_aluno):
    if len(vetor_aluno) > 0:
        aluno_encontrado = False
        busca = input("Encontrar aluno: ")
        for i in range(len(vetor_aluno)):
            if busca == vetor_aluno[i].nome:
                aluno_encontrado = True
                print('Nome: ',vetor_aluno[i].nome,'\nIdade: ',vetor_aluno[i].idade,'\nTelefone: ',vetor_aluno[i].telefone,'\nRua: ',vetor_aluno[i].logradouro,
                    '\nNº: ',vetor_aluno[i].numero,'\nBairro: ',vetor_aluno[i].bairro,'\nCEP: ',vetor_aluno[i].cep,'\nSérie: ',vetor_aluno[i].serie )
                print('Aluno Encontrado')
                break
            if aluno_encontrado == False:
                print('Aluno não foi encontrado')
    else:
        print('Não há alunos cadastrados.')

def visualizar(vetor_aluno):
    if len(vetor_aluno) > 0:
        for i in range(len(vetor_aluno)):
            print('Nome: ',vetor_aluno[i].nome,'\nIdade: ',vetor_aluno[i].idade,'\nTelefone: ',vetor_aluno[i].telefone,'\nRua: ',vetor_aluno[i].logradouro,
                    '\nNº: ',vetor_aluno[i].numero,'\nBairro: ',vetor_aluno[i].bairro,'\nCEP: ',vetor_aluno[i].cep,'\nSérie: ',vetor_aluno[i].serie )
            print('\n-----------------------------\n')
    else:
        print('Não há nenhum aluno cadastrado ainda')


def menu():
    print('Sistema de gerenciamento de alunos\n1. Cadastrar Aluno \n2. Consultar Aluno\n3. Visualizar todos os dados\n4. Sair')
    op = int(input('Insira a opção desejada: '))
    return op

def main():
    vetor_aluno = []
    opcao = menu()
    while opcao >= 1 and opcao <= 4:
        if opcao == 1:
            vetor_aluno = cadastrar(vetor_aluno)
        elif opcao == 2:
            consultar(vetor_aluno)
        elif opcao == 3:
            visualizar(vetor_aluno)
        elif opcao == 4:
            print('Você saiu do sistema.')
            break
        opcao = menu()

main()

"""### 5. Faça um programa que realize o cadastro de contas bancarias com as seguintes informações: numero da conta, nome do titular e saldo. O banco permitirá o cadastramento de 15 contas. **Crie uma função para cada opção do menu** a seguir. Utilize a estrutura na passagem de parâmetro:
Menu de opções:
1. Cadastrar contas
2. Visualizar todas as contas
3. Consultar por nome
4. Alterar nome e/ou saldo de um número de conta
5. Excluir a conta com menor saldo
6. Sair

Observação:

* No item de menu 4. Alterar nome e/ou saldo de um número de conta, entenda que apenas pode ser alterado o nome e o saldo depois que você pesquisar pelo número da conta.
* No item 5 do menu, encontre o menor saldo dentre todos cadastrados, **depois exclua esta ÚNICA conta.**. O assunto de excluir algo de um vetor foi dado na disciplina de Algoritmo.


"""

# Percorra todo os vetor e quando a condição de enontrar um menor saldo for executada, guarde o índice
# Fora do laço de repetição, exclua pelo índice, por exemplo com o comando pop(índice)

class TipoConta:
    numero = 0
    nome = ''
    saldo = 0.0

def cadastrar(vetor_banco):
    for i in range(2):
        c = TipoConta()
        c.numero = int(input("Número da conta: "))
        c.nome = input("Titular da conta: ")
        c.saldo = float(input("Insira o saldo da conta: R$ "))
        vetor_banco.append(c)
    return vetor_banco

def visualizar(vetor_banco):
    if len(vetor_banco) > 0:
        for i in range(len(vetor_banco)):
            print('Número da conta:',vetor_banco[i].numero,' Nome do titular:',vetor_banco[i].nome,' Saldo da conta:',vetor_banco[i].saldo)
    else:
        print('Não há contas cadastradas.')

def consultar(vetor_banco):
    busca = input("Insira o nome do titular: ")
    conta_encontrada = False
    if len(vetor_banco) > 0:
        for i in range(len(vetor_banco)):
            if busca == vetor_banco[i].nome:
                print('Número da conta:',vetor_banco[i].numero,' Nome do titular:',vetor_banco[i].nome,' Saldo da conta:',vetor_banco[i].saldo)
                print('Conta encontrada!')
                conta_encontrada = True
                break
            else:
                print('Esta conta não foi encontrada.')
    else:
        print('Não há contas cadastradas')


def alterar(vetor_banco):
    if len(vetor_banco) > 0:
        busca = int(input("Insira o número da conta: "))
        for i in range(len(vetor_banco)):
            if busca == vetor_banco[i].numero:
                vetor_banco[i].nome = input("Insira o novo nome do titular: ")
                vetor_banco[i].saldo = float(input("Insira o novo saldo da conta: "))
        print('Conta alterada com sucesso!')
    else:
        print('Não há contas cadastradas.')
    return vetor_banco

def excluir(vetor_banco):
    if len(vetor_banco) > 0:
        for i in range(len(vetor_banco)):
            if i == 0:
                menor_saldo = vetor_banco[i].saldo
                indice_menor = i
            if vetor_banco[i].saldo < menor_saldo:
                menor_saldo = vetor_banco[i].saldo
                indice_menor = i
        vetor_banco.pop(indice_menor)
        print('Conta excluída com sucesso!')
    else:
        print('Não há contas cadastradas.')
    return vetor_banco

def menu():
    print('Gerenciamento Bancário')
    print('1. Cadastrar Contas')
    print('2. Visualizar Contas')
    print('3. Consultar por nome')
    print('4. Alterar nome e/ou saldo de um número de conta')
    print('5. Excluir a conta com menor saldo')
    print('6. Sair')
    op = int(input('Escolha uma opção '))
    return op

def main():
    vetor_banco = []
    opcao = menu()
    while opcao >= 1 and opcao <= 6:
        if opcao == 1:
            vetor_banco = cadastrar(vetor_banco)
        elif opcao == 2:
            visualizar(vetor_banco)
        elif opcao == 3:
            consultar(vetor_banco)
        elif opcao == 4:
            vetor_banco = alterar(vetor_banco)
        elif opcao == 5:
            vetor_banco = excluir(vetor_banco)
        elif opcao == 6:
            print('Você saiu do sistema.')
            break
        opcao = menu()
main()

"""### 6. Elabore uma estrutura para representar um Funcionario (código, nome, endereço, salário). Para o membro endereço deve-se criar outra estrutura Endereço (logradouro, número, bairro, cidade). **Utilize aninhamento de estruturas** para resolver este desenvolvimento. Construa uma função para cada opçao do menu a seguir:

Menu de opções:
1. Cadastrar funcionários
2. Visualizar todos os dados
3. Sair
"""

# Digite seu código aqui
#Quando for cadastrar o endereço dos funcionarios:
#f.salario = float(input(''))
#####################################
#f.endereco = TipoEndereco()
#####################################
#f.endereco.logradouro = input()
#f.endereco.numero = int(input())

class TipoEndereco:
    logradouro = ''
    numero = 0
    bairro = ''
    cidade = ''

class TipoFuncionario:
    codigo = 0
    nome = ''
    endereco = TipoEndereco()
    salario = 0.0

def cadastrar(vetor_funcionario):
    for i in range(2):
        f = TipoFuncionario()
        f.codigo = int(input("Insira o código do funcionário: "))
        f.nome = input("Insira o nome do funcionário: ")
        f.salario = float(input("Insira o salário do funcionário: "))
        f.endereco = TipoEndereco()
        f.endereco.logradouro = input("Insira o logradouro: ")
        f.endereco.numero = int(input("Número da casa: "))
        f.endereco.bairro = input("Insira o nome do bairro: ")
        f.endereco.cidade = input("Insira o nome da cidade: ")
        vetor_funcionario.append(f)
    return vetor_funcionario

def visualizar(vetor_funcionario):
    if len(vetor_funcionario) > 0:
        for i in range(len(vetor_funcionario)):
            print('Código do funcionário: ',vetor_funcionario[i].codigo)
            print('Nome do funcionário: ',vetor_funcionario[i].nome)
            print('Salario do funcionário: ',vetor_funcionario[i].salario)
            print('Logradouro do funcionário: ',vetor_funcionario[i].endereco.logradouro)
            print('Nº da casa do funcionário: ',vetor_funcionario[i].endereco.numero)
            print('Bairro do funcionário: ',vetor_funcionario[i].endereco.bairro)
            print('Cidade do funcionário: ',vetor_funcionario[i].endereco.cidade)
            print('------------------------------')
    else:
        print('Não há funcionários cadastrados.')

def menu():
    print('Sistema de Gerenciamento de Funcionários')
    print('1. Cadastrar Funcionários')
    print('2. Visualizar todos os dados')
    print('3. Sair')
    op = int(input("Insira a opção desejada: "))
    return op

def main():
    vetor_funcionario = []
    opcao = menu()
    while opcao >= 1 and opcao <= 3:
        if opcao == 1:
            vetor_funcionario = cadastrar(vetor_funcionario)
        elif opcao == 2:
            visualizar(vetor_funcionario)
        elif opcao == 3:
            print('Você saiu do sistema.')
            break
        else:
            print('Escolha uma opção válida')
            main()
        opcao = menu()
main()

"""### 7. Elabore uma estrutura para representar um Produto (código, nome, data_fabricacao, data_validade, preço). Para o membro data_fabricacao e data_validade, deve-se criar outra estrutura Data (dia, mês, ano). **Utilize aninhamento de estruturas** para resolver este desenvolvimento. Construa uma função para cada opçao do menu a seguir:

Menu de opções:
1. Cadastrar produtos
2. Visualizar todos os dados
3. Sair
"""

class TipoData:
    dia = 0
    mes = 0
    ano = 0

class TipoProduto:
    codigo = 0
    nome = ''
    fabricacao = TipoProduto()
    validade = TipoProduto()
    preco = 0.0

def cadastrar(vetor_produto):
    for i in range(2):
        p = TipoProduto()
        p.codigo = int(input("Insira o código do produto: "))
        p.nome = input("Insira o nome do produto: ")
        p.fabricacao = TipoData()
        p.fabricacao.dia = int(input("Insira o dia de fabricação: "))
        p.fabricacao.mes = int(input("Insira o mês de fabricação: "))
        p.fabricacao.ano = int(input("Insira o ano de fabricação: "))
        p.validade = TipoData()
        p.validade.dia = int(input("Insira o dia de validade: "))
        p.validade.mes = int(input("Insira o mês de validade: "))
        p.validade.ano = int(input("Insira o ano de validade: "))
        vetor_produto.append(p)
    return vetor_produto

def visualizar(vetor_produto):
    if len(vetor_produto) > 0:
        for i in range(len(vetor_produto)):
            print('--------------------')
            print('Código do produto:',vetor_produto[i].codigo)
            print('Nome do produto:',vetor_produto[i].nome)
            print('Data de fabricação:',vetor_produto[i].fabricacao.dia,'/',vetor_produto[i].fabricacao.mes,'/',vetor_produto[i].fabricacao.ano)
            print('Data de validade:',vetor_produto[i].validade.dia,'/',vetor_produto[i].validade.mes,'/',vetor_produto[i].validade.ano)
            print('--------------------')
    else:
        print('Não há produto cadastrado.')

def menu():
    print("Gerenciamento de produto")
    print('1. Cadastrar produtos')
    print('2. Visualizar todos os dados')
    print('3. Sair')
    op = int(input("Escolha a opção: "))
    return op

def main():
    vetor_produto = []
    opcao = menu()
    while opcao >= 1 and opcao <= 3:
        if opcao == 1:
            vetor_produto = cadastrar(vetor_produto)
        elif opcao == 2:
            visualizar(vetor_produto)
        elif opcao == 3:
            print('Você saiu do sistema.')
            break
        else:
            print("Insira uma opção válida.")
            main()
        opcao = menu()

main()

"""### 8. Elabore duas estruturas, como é apresentado a seguir:

CLIENTE |  DOCUMENTOS |
 -------|--------------
cod_cli |   num_doc   |
nome    |   cod_cli   |
fone    |   dia_venc  |
        |   dia_pag   |
        |   valor     |
        |   juros     |

* Sabe-se que um documento só pode ser cadastrado para um cliente que já exista.
* Considere que podem existir, no máximo, 15 clientes e 30 documentos. Crie um vetor para clientes e outro para documentos.

* Crie um menu para a realização de cada uma das operações especificadas a seguir:

**** SISTEMA GERENCIADOR DE CLIENTES E DOCUMENTOS ****

1. Cadastrar clientes

2. Relatório de clientes

3. Cadastrar documentos

4. Relatório de documentos

5. Excluir clientes sem documentos

6. Excluir documentos individuais pelo número

7. Excluir documentos por cliente

8. Excluir documentos por período

9. Alterar as informações dos clientes

10. Mostrar o total de documentos de determinado cliente

11. Sair

Qual opção deseja?

.................................................................................................

Para cada item do menu, desenvolva uma função.

A seguir são apresentados os detalhes de implementação de cada opção do menu:

1. Cadastrar clientes — não pode existir mais que um cliente com o mesmo código.

2. Relatório de clientes - listar todos os clientes cadastrados.

3. Cadastrar documentos — ao cadastrar um documento, **se o dia de pagamento for maior que o dia de vencimento, calcular o campo ‘juros’ do registro documentos (5% sobre o valor original do documento)**.

4. Relatório de documentos - listar todos os documentos cadastrados.

5. Excluir clientes — um cliente só poderá ser excluído se não existir nenhum documento associado a ele.

6. Excluir documentos individuais — por meio de seu número. Caso o documento não exista, o programa deverá mostrar a mensagem "Documento não encontrado".

7. Excluir documentos por cliente — o programa deverá informar o código do cliente e excluir todos os seus documentos. Caso o cliente não exista, deverá mostrar a mensagem "Cliente não encontrado".

8. Excluir documentos por período — o programa deverá informar o dia inicial e o dia final e excluir todos os documentos que possuam data de vencimento nesse período.

9. Alterar as informações sobre os clientes — **só NÃO altere o código do cliente**.

10. Mostrar o total de documentos de determinado cliente.
"""

class TipoCliente:
    codigo = 0
    nome = ''
    fone = 0

class TipoDocumento:
    num_doc = 0
    cod_cli = 0
    dia_venc = 0
    dia_pag = 0
    valor = 0.0
    juros = 0.0


def cadastrar_cliente(vetor_cliente):
    if len(vetor_cliente) <= 15:
        c = TipoCliente()
        c.codigo = int(input("Insira o código do cliente: "))
        c.nome = input("Insira o nome do cliente: ")
        c.fone = int(input("Insira o telefone do cliente: "))
        vetor_cliente.append(c)
    else:
        print('O número máximo de clientes já foi atingido.')
    return vetor_cliente

def visualizar(vetor_cliente):
    if len(vetor_cliente) > 0:
        for i in range(len(vetor_cliente)):
            print('Código:',vetor_cliente[i].codigo,' Nome:',vetor_cliente[i].nome,' Telefone: ',vetor_cliente[i].fone)
    else:
        print('Não há clientes cadastrados')

def cadastrar_documento(vetor_documento,vetor_cliente):
    if len(vetor_documento) < 30:
        codigo_cliente = int(input("Insira o código do cliente: "))
        encontrado = False
        for i in range(len(vetor_cliente)):
            if codigo_cliente == vetor_cliente[i].codigo:
                encontrado = True
                print('Cliente encontrado!')
                d = TipoDocumento()
                d.num_doc = int(input("Insira o número do documento: "))
                d.cod_cli = int(input("Insira o código do cliente: "))
                d.dia_venc = int(input("Insira o dia de vencimento: "))
                d.dia_pag = int(input("Insira o dia de pagamento: "))
                d.valor = float(input("Insira o valor do documento: R$ "))
                if d.dia_pag > d.dia_venc:
                    d.juros = (d.valor / 100) * 5
                    d.valor = d.valor + d.juros
                else:
                    d.juros = 0
                vetor_documento.append(d)
            else:
                print('Cliente não encontrado.')
    else:
        print('Não há clientes cadastrados.')
    return vetor_documento

#def reajuste(vetor_documento):
#    if len(vetor_documento) > 0:
#        vetor_reajuste = []
#        for documento in vetor_documento:
#            if documento.juros == 0:
#                reajuste = (documento.valor / 100) * 4
#                documento.valor = documento.valor + reajuste
#                print('Reajuste de 4% realizado com sucesso!')
#                vetor_reajuste.append(documento)
#                print(f'Existem {len(vetor_reajuste)} documentos alterados.')
#    else:
#        print('Não há produtos cadastrados.')
#    return vetor_documento
#    return vetor_reajuste


#def reajuste(vetor_documento):
#    vetor_reajuste = []
#    if len(vetor_documento) > 0:
#        for documento in vetor_documento:
#            if documento.juros == 0:
#                documento.juros = (documento.valor / 100) * 4
#                documento.valor = documento.valor + documento.juros
#                print('Reajuste de 4% realizado com sucesso!')
#                vetor_reajuste.append(documento)
#                print(f'Existem {len(vetor_reajuste)} documentos alterados.')
#    else:
#        print('Não há produtos cadastrados.')
#    return vetor_documento
#    return vetor_reajuste

def reajuste(vetor_documento,vetor_reajuste):
    if len(vetor_documento) > 0:
        for documento in vetor_documento:
            if documento.juros == 0:
                documento.juros = (documento.valor / 100) * 4
                documento.valor = documento.valor + documento.juros
                print('Reajuste de 4% realizado com sucesso!')
                vetor_reajuste.append(documento)
        print(f'Existem {len(vetor_reajuste)} documentos alterados.')
    else:
        print('Não há produtos cadastrados.')
    return vetor_documento
    return vetor_reajuste

def calendario(vetor_documento):
    if len(vetor_documento) > 0:
        dia1 = int(input("Insira a data inicial: "))
        dia2 = int(input("Insira a data final: "))
    for i in vetor_documento:
        if i.dia_venc >= dia1 and i.dia_venc <= dia2:
            print('Estes são os documentos na data requerida........')
            print('Nº Documento: ',i.num_doc,' Cód Cliente:',i.cod_cli,' Dia Venc:',i.dia_venc,'Dia Pag:',i.dia_pag,' Valor final:',i.valor)
    else:
        print('Não há documentos cadastrados nesta data.')

def visualizar_documento(vetor_documento):
    if len(vetor_documento) > 0:
        for i in range(len(vetor_documento)):
            print('--------------------------------------')
            print('Nº do documento: ',vetor_documento[i].num_doc)
            print('Código do cliente: ',vetor_documento[i].cod_cli)
            print('Dia de vencimento: ',vetor_documento[i].dia_venc)
            print('Dia de pagamento: ',vetor_documento[i].dia_pag)
            print('Valor do documento: R$ ',vetor_documento[i].valor)
            print('--------------------------------------')
    else:
        print('Não há documento cadastrado.')

def menu():
    print('Sistema de gerenciamento de documentos.')
    print('1. Cadastrar clientes')
    print('2. Relatório de clientes')
    print('3. Cadastrar documento')
    print('4. Visualizar documento')
    print('5. Excluir clientes sem documentos')
    print('12. Reajuste de 4% para documentos em dia.')
    print('13. Consultar por data')
    print('11. Sair')
    op = int(input('Escolha uma opção: '))
    return op

def main():
    vetor_reajuste = []
    vetor_cliente = []
    vetor_documento = []
    opcao = menu()
    while opcao >= 1 and opcao <= 13:
        if opcao == 1:
            vetor_cliente = cadastrar_cliente(vetor_cliente)
        elif opcao == 2:
            visualizar(vetor_cliente)
        elif opcao == 3:
            vetor_documento = cadastrar_documento(vetor_documento,vetor_cliente)
        elif opcao == 4:
            visualizar_documento(vetor_documento)
        elif opcao == 5:
            vetor_cliente = excluir(vetor_cliente)
        elif opcao == 12:
            vetor_documento = reajuste(vetor_documento,vetor_reajuste)
        elif opcao == 13:
            calendario(vetor_documento)
        elif opcao == 11:
            print('Você saiu do sistema.')
            break
        else:
            print("Insira uma opção válida")
            main()
        opcao = menu()
main()

class TipoCliente:
    codigo = 0
    nome = ''
    fone = 0

class TipoDocumento:
    num_doc = 0
    cod_cli = 0
    dia_venc = 0
    dia_pag = 0
    valor = 0.0
    juros = 0.0

def cadastrar_cliente(vetor_cliente):
    if len(vetor_cliente) <= 15:
        c = TipoCliente()
        c.codigo = int(input("Insira o código do cliente: "))
        c.nome = input("Insira o nome do cliente: ")
        c.fone = int(input("Insira o telefone do cliente: "))
        vetor_cliente.append(c)
    else:
        print('O número máximo de clientes já foi atingido.')
    return vetor_cliente

def visualizar(vetor_cliente):
    if len(vetor_cliente) > 0:
        for i in range(len(vetor_cliente)):
            print('Código:',vetor_cliente[i].codigo,' Nome:',vetor_cliente[i].nome,' Telefone: ',vetor_cliente[i].fone)
    else:
        print('Não há clientes cadastrados')

def cadastrar_documento(vetor_documento,vetor_cliente):
    if len(vetor_documento) < 30:
        codigo_cliente = int(input("Insira o código do cliente: "))
        encontrado = False
        for i in range(len(vetor_cliente)):
            if codigo_cliente == vetor_cliente[i].codigo:
                encontrado = True
                print('Cliente encontrado!')
                d = TipoDocumento()
                d.num_doc = int(input("Insira o número do documento: "))
                d.cod_cli = int(input("Insira o código do cliente: "))
                d.dia_venc = int(input("Insira o dia de vencimento: "))
                d.dia_pag = int(input("Insira o dia de pagamento: "))
                d.valor = float(input("Insira o valor do documento: R$ "))
                if d.dia_pag > d.dia_venc:
                    juros = (d.valor / 100) * 5
                    d.valor = d.valor + juros
                else:
                    juros = 0
                vetor_documento.append(d)
            else:
                print('Cliente não encontrado.')
    else:
        print('Não há clientes cadastrados.')
    return vetor_documento

def visualizar_documento(vetor_documento):
    if len(vetor_documento) > 0:
        for i in range(len(vetor_documento)):
            print('--------------------------------------')
            print('Nº do documento: ',vetor_documento[i].num_doc)
            print('Código do cliente: ',vetor_documento[i].cod_cli)
            print('Dia de vencimento: ',vetor_documento[i].dia_venc)
            print('Dia de pagamento: ',vetor_documento[i].dia_pag)
            print('Valor do documento: R$ ',vetor_documento[i].valor)
            print('--------------------------------------')
    else:
        print('Não há documento cadastrado.')

def menu():
    print('Sistema de gerenciamento de documentos.')
    print('1. Cadastrar clientes')
    print('2. Relatório de clientes')
    print('3. Cadastrar documento')
    print('4. Visualizar documento')
    print('5. Excluir clientes sem documentos')
    print('11. Sair')
    op = int(input('Escolha uma opção: '))
    return op

def main():
    vetor_cliente = []
    vetor_documento = []
    opcao = menu()
    while opcao >= 1 and opcao <= 11:
        if opcao == 1:
            vetor_cliente = cadastrar_cliente(vetor_cliente)
        elif opcao == 2:
            visualizar(vetor_cliente)
        elif opcao == 3:
            vetor_documento = cadastrar_documento(vetor_documento,vetor_cliente)
        elif opcao == 4:
            visualizar_documento(vetor_documento)
        elif opcao == 5:
            vetor_cliente = excluir(vetor_cliente)
        elif opcao == 11:
            print('Você saiu do sistema.')
            break
        else:
            print("Insira uma opção válida")
            main()
        opcao = menu()
main()

# Por onde começo a programar esse exercício?
# Sempre comece da parte mais simples/talvez a menor e já
# vai implementando e testando cada uma das funções
# Programe o cadastro e o relatório para testar e assim até a
# última função.

class TipoCliente:
    cod_cli = 0
    nome = ''
    fone = ''

class TipoDocumento:
    num_doc = 0
    cod_cli = 0
    dia_venc = 0
    dia_pag = 0
    valor = 0.0
    juros = 0.0

def menu():
    print('\n\nSistema de Gerenciamento de Cliente e Documentos')
    print('1 - Cadastrar clientes')
    print('2 - Relatório de clientes')
    print('3 - Cadastrar documentos')
    print('4 - Relatório de documentos')
    print('5 - Sair')
    op = int(input("Qual opção voce deseja? "))
    return op

def cadastrar_clientes(vet_clientes):
    for i in range(2):
        cliente = TipoCliente()
        #codigo = int(input("Insira o código do cliente: "))
        #if codigo != vet_clientes[i].cod_cli:
        #cliente.cod_cli = codigo
        cliente.cod_cli = int(input("Insira o código do cliente: "))
        cliente.nome = input("Insira o nome do cliente: ")
        cliente.fone = input("Insira o telefone do cliente: ")
        vet_clientes.append(cliente)
    return vet_clientes

def relatorio_clientes(vet_clientes):
    if len(vet_clientes) > 0:
        #foreach é um for para representar um vetor, usa em js - Este for só poderá ser utilizado se ja houver valor dentro do vetor
        #for i in range(len(vet_clientes)):
        for cliente in vet_clientes:
            print(f'Código: {cliente.cod_cli}\tNome: {cliente.nome}\tTelefone: {cliente.fone}')
    else:
        print('Não há clientes cadastrados')

def cadastrar_documentos(vet_documentos):
    for i in range(2):
        doc = TipoDocumento()
        doc.num_doc = int(input("Cadastre o número do documento: "))
        doc.cod_cli = int(input("Cadastre o código do cliente: "))
        doc.dia_venc = int(input("Insira o dia de vencimento: "))
        doc.dia_pag = int(input("Insira o dia de pagamento: "))
        doc.valor = float(input("Insira o valor do documento: "))
        if doc.dia_pag > doc.dia_venc:
            doc.juros = doc.valor * 5 / 100
        else:
            doc.juros = 0
        vet_documentos.append(doc)
    return vet_documentos

def relatorio_documentos(vet_documentos):
    if len(vet_documentos) > 0:
        #foreach
        for doc in vet_documentos:
            print(f'Número do Documento: {doc.num_doc} \tCódigo do Cliente: {doc.cod_cli} \tDia do Vencimento: {doc.dia_venc} \tDia do Pagamento: {doc.dia_pag} \tValor: {doc.valor} \tJuros {doc.juros}')
    else:
        print('Não há documentos cadastrados!')


def main():
    vet_clientes = []
    vet_documentos = []
    opcao = menu()
    while opcao >= 1 and opcao <= 4:
        if opcao == 1:
            vet_clientes = cadastrar_clientes(vet_clientes)
        elif opcao == 2:
            relatorio_clientes(vet_clientes)
        elif opcao == 3:
            vet_documentos = cadastrar_documentos(vet_documentos)
        elif opcao == 4:
            relatorio_documentos(vet_documentos)

        opcao = menu()
main()

"""####9. (OPCIONAL A IMPLEMENTAÇÃO) Uma empresa prestadora de serviços armazena informações sobre os serviços prestados. Sabe-se que a empresa pode realizar no máximo três serviços diariamente. É de interesse de sua direção manter um histórico mensal (30 dias) sobre os serviços prestados.
A empresa realiza quatro tipos de serviços:

1) pintura;

2) jardinagem;

3) faxina e

4) reforma em geral.

Cada serviço realizado deve ser cadastrado com as seguintes informações: número do serviço, valor do serviço, código do serviço e código do cliente, **numa matriz 30x3 referente a estrutura Servico_prestado**.

Cadastre/digite os quatro tipos de serviços (código e descrição) que a empresa poderá realizar. Para isso, utilize um vetor de quatro posições referente a **estrutura Tipo_servico**.
O programa deverá mostrar o seguinte menu de opções:
1. Cadastrar os tipos de serviços
2. Mostrar todos os tipos de serviço
3. Cadastrar os serviços prestados
4. Mostrar todos os serviços prestados
5. Mostrar os serviços prestados em determinado dia
6. Mostrar os serviços prestados dentro de um intervalo de valor
7. Mostrar um relatório geral (separado por dia), que exiba, inclusive, a descrição do tipo do serviço
8. Sair

**Para a opção 1**: deve-se cadastrar os tipos de serviços oferecidos pela empresa, com código e descrição.

**Para a opção 3**: deve-se considerar que deverão ser cadastrados os serviços prestados ao logo do mês. Em cada dia podem ser cadastrados, no máximo, três serviços prestados.

Utilize uma matriz capaz de armazenar em cada posição todas as informações referentes a um serviço prestado (número, valor, código do serviço, código do cliente). **Cada linha representa um dia do mês**. Dessa maneira, considere a matriz com dimensão 30 × 3.

Solicite o dia em que o serviço foi prestado e as demais informações.
Lembre-se de que a empresa só pode prestar os serviços que já tenham sido cadastrados no vetor de tipo de serviços.

Caso o usuário digite um código de tipo de serviço inválido, o programa deverá mostrar uma mensagem de erro.

Quando o usuário tentar cadastrar mais de três serviços prestados em um mesmo dia, também deverá mostrar uma mensagem de erro.

**Para a opção 5**: o programa deverá receber o dia que se deseja consultar e mostrar os respectivos serviços prestados.

**Para a opção 6**: o programa deverá receber o valor mínimo e o valor máximo e mostrar os serviços prestados que estiverem nesse intervalo.

**Para a opção 7**: o programa deverá mostrar todos os serviços prestados, conforme o exemplo a seguir.

                  DIA 01


No do serviço| Valor do serviço R$| Código do serviço| Descrição| Código do cliente
---|---|---|---|---
100| 200,00| 1| Pintura| 1
150| 100,00| 3| Faxina| 5
201| 640,00| 4| Reforma em geral| 2

                  DIA 02

No do serviço| Valor do serviço R$| Código do serviço| Descrição| Código do cliente
---|---|---|---|---
301| 600,00| 4| Reforma em geral| 3
280| 352,00| 1| Pintura| 2
306| 200,00| 2| Jardinagem| 1
"""

# Digite seu código aqui